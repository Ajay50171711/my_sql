What is a Stored Procedure?
A Stored Procedure is a set of SQL statements that you can save and reuse, so you don’t have to write the same SQL code multiple times. Once you create a stored procedure, you can execute it whenever you need it.

You can think of a stored procedure like a function in programming. It allows you to package a set of operations together and execute them by calling the procedure.

Key Features of Stored Procedures:
Reusable: Once created, you can execute it multiple times.
Can take parameters: You can pass values to the stored procedure to make it dynamic.
Can perform multiple operations: It can run multiple SQL statements (e.g., SELECT, INSERT, UPDATE, DELETE).
Syntax for Creating a Stored Procedure:
sql
Copy code
DELIMITER $$

CREATE PROCEDURE procedure_name (parameters)
BEGIN
    -- SQL statements
END $$

DELIMITER ;
DELIMITER $$: This changes the delimiter temporarily (to $$) so that you can use ; within the stored procedure.
CREATE PROCEDURE: This creates a stored procedure.
parameters: Optional. You can pass parameters to the procedure to make it dynamic.
BEGIN ... END: This defines the block of SQL statements the procedure will execute.
Example Scenario:
Let’s say we have a table employees and we want to create a stored procedure to insert a new employee into the table.

Step 1: Create the employees Table
sql
Copy code
CREATE TABLE employees (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    position VARCHAR(50),
    salary DECIMAL(10, 2)
);
Step 2: Create the Stored Procedure to Insert a New Employee
Now, let’s create a stored procedure that will insert a new employee into the employees table.

sql
Copy code
DELIMITER $$

CREATE PROCEDURE insert_employee (
    IN employee_name VARCHAR(100),
    IN employee_position VARCHAR(50),
    IN employee_salary DECIMAL(10, 2)
)
BEGIN
    INSERT INTO employees (name, position, salary)
    VALUES (employee_name, employee_position, employee_salary);
END $$

DELIMITER ;
Explanation:
CREATE PROCEDURE insert_employee: This creates a procedure named insert_employee.
Parameters:
IN employee_name VARCHAR(100): This is an input parameter for the employee's name.
IN employee_position VARCHAR(50): This is an input parameter for the employee's position.
IN employee_salary DECIMAL(10, 2): This is an input parameter for the employee's salary.
SQL Statements: Inside the procedure, we have an INSERT INTO statement that inserts the provided values into the employees table.
DELIMITER $$: This is used to change the delimiter temporarily, as stored procedures often contain multiple SQL statements.
Step 3: Call the Stored Procedure
Once the stored procedure is created, you can call it to insert a new employee into the employees table. For example:

sql
Copy code
CALL insert_employee('Alice Johnson', 'Software Developer', 75000);
What Happens?
When you run CALL insert_employee('Alice Johnson', 'Software Developer', 75000);, the procedure will execute the INSERT INTO employees statement.
It will insert the following data into the employees table:
id	name	position	salary
1	Alice Johnson	Software Developer	75000.00
Step 4: Check the Table
To check if the new employee has been inserted, you can run a SELECT query:

sql
Copy code
SELECT * FROM employees;
Example Output:
id	name	position	salary
1	Alice Johnson	Software Developer	75000.00
Advantages of Using Stored Procedures:
Simplified Reuse: You don't need to repeat the same SQL code each time you want to insert a new employee. You just call the procedure.
Better Structure: The logic is encapsulated in a single procedure, which makes your code more organized.
Security: You can restrict direct access to the table and allow only certain users to execute stored procedures.
Performance: Stored procedures can improve performance because they are precompiled and stored in the database.
Summary:
A Stored Procedure in MySQL is like a reusable function that you define once and can call whenever you need it. In our example, we created a stored procedure insert_employee that inserts a new employee into the employees table. You call it with the required parameters (name, position, salary), and it runs the INSERT operation.

Stored procedures are useful for automating common tasks, simplifying your code, and improving security and performance.

Let me know if you need more examples or further clarification!



You said:
give some more example to understand store procedure
ChatGPT said:
ChatGPT
Absolutely! Let's go through a few more examples to give you a better understanding of how stored procedures work in MySQL.

Example 1: Stored Procedure to Update an Employee's Salary
In this example, we will create a stored procedure that updates the salary of an employee based on their id.

Step 1: Create the employees Table
sql
Copy code
CREATE TABLE employees (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    position VARCHAR(50),
    salary DECIMAL(10, 2)
);
Step 2: Create the Stored Procedure to Update Salary
This stored procedure will take two parameters: employee_id (the ID of the employee) and new_salary (the new salary value).

sql
Copy code
DELIMITER $$

CREATE PROCEDURE update_salary (
    IN employee_id INT,
    IN new_salary DECIMAL(10, 2)
)
BEGIN
    UPDATE employees
    SET salary = new_salary
    WHERE id = employee_id;
END $$

DELIMITER ;
Explanation:
CREATE PROCEDURE update_salary: We define a procedure named update_salary.
Parameters:
IN employee_id INT: The ID of the employee whose salary we want to update.
IN new_salary DECIMAL(10, 2): The new salary value for the employee.
SQL Logic: The procedure executes an UPDATE statement to set the salary to the new value where the id matches the provided employee_id.
Step 3: Call the Stored Procedure
Let’s say we want to update the salary of the employee with id = 1 to 80000. We call the stored procedure like this:

sql
Copy code
CALL update_salary(1, 80000);
Step 4: Check the Table
To verify that the salary has been updated, you can run a SELECT query:

sql
Copy code
SELECT * FROM employees WHERE id = 1;
Example Output (after the update):
id	name	position	salary
1	Alice Johnson	Software Developer	80000.00
Example 2: Stored Procedure to Delete an Employee by ID
In this example, we will create a stored procedure to delete an employee from the employees table based on their id.

Step 1: Create the Stored Procedure to Delete Employee
sql
Copy code
DELIMITER $$

CREATE PROCEDURE delete_employee (
    IN employee_id INT
)
BEGIN
    DELETE FROM employees
    WHERE id = employee_id;
END $$

DELIMITER ;
Explanation:
CREATE PROCEDURE delete_employee: This creates a stored procedure named delete_employee.
Parameter:
IN employee_id INT: The id of the employee to be deleted.
SQL Logic: The procedure executes a DELETE statement that removes the employee from the employees table with the given id.
Step 2: Call the Stored Procedure
To delete the employee with id = 1, we would call the procedure like this:

sql
Copy code
CALL delete_employee(1);
Step 3: Check the Table
To confirm that the employee was deleted, you can run the following query:

sql
Copy code
SELECT * FROM employees;
Example Output (after the delete):
id	name	position	salary
(No rows returned)			
Example 3: Stored Procedure to Get Employee Details
This example demonstrates how to create a stored procedure that retrieves an employee's details (name, position, and salary) based on the employee's id.

Step 1: Create the Stored Procedure to Get Employee Details
sql
Copy code
DELIMITER $$

CREATE PROCEDURE get_employee_details (
    IN employee_id INT
)
BEGIN
    SELECT name, position, salary
    FROM employees
    WHERE id = employee_id;
END $$

DELIMITER ;
Explanation:
CREATE PROCEDURE get_employee_details: This procedure fetches an employee's details from the employees table.
Parameter:
IN employee_id INT: The ID of the employee whose details you want to retrieve.
SQL Logic: The procedure executes a SELECT statement to fetch the name, position, and salary of the employee based on the provided id.
Step 2: Call the Stored Procedure
To retrieve the details of the employee with id = 2, we call the procedure like this:

sql
Copy code
CALL get_employee_details(2);
Step 3: Check the Result
The result will be something like this:

name	position	salary
John Doe	Software Engineer	65000
Example 4: Stored Procedure with Multiple Operations
Let's create a stored procedure that inserts a new employee into the employees table and logs the action into an audit_log table.

Step 1: Create the audit_log Table
sql
Copy code
CREATE TABLE audit_log (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    action VARCHAR(100),
    table_name VARCHAR(100),
    record_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
Step 2: Create the Stored Procedure with Multiple Operations
Now, let’s create a stored procedure that does the following:

Insert a new employee.
Log the insertion in the audit_log table.
sql
Copy code
DELIMITER $$

CREATE PROCEDURE insert_employee_with_log (
    IN employee_name VARCHAR(100),
    IN employee_position VARCHAR(50),
    IN employee_salary DECIMAL(10, 2)
)
BEGIN
    -- Insert the new employee
    INSERT INTO employees (name, position, salary)
    VALUES (employee_name, employee_position, employee_salary);

    -- Get the last inserted employee ID
    SET @last_id = LAST_INSERT_ID();

    -- Log the action into audit_log
    INSERT INTO audit_log (action, table_name, record_id)
    VALUES ('INSERT', 'employees', @last_id);
END $$

DELIMITER ;
Explanation:
CREATE PROCEDURE insert_employee_with_log: We define a procedure to insert a new employee and log the action.
Multiple SQL Statements: The procedure performs two operations:
Insert into employees: Inserts the new employee.
Log into audit_log: Logs the action, using LAST_INSERT_ID() to get the ID of the newly inserted employee and store it in the audit log.
Step 3: Call the Stored Procedure
Now, we can call this stored procedure to insert an employee and log the action:

sql
Copy code
CALL insert_employee_with_log('Eva Green', 'Product Manager', 85000);
Step 4: Check Both Tables
To verify the employees table:
sql
Copy code
SELECT * FROM employees;
To verify the audit_log table:
sql
Copy code
SELECT * FROM audit_log;
Example Output (After Insertion):
employees table:

id	name	position	salary
1	Eva Green	Product Manager	85000
audit_log table:

log_id	action	table_name	record_id	created_at
1	INSERT	employees	1	2024-12-12 14:00:00
Summary:
Here are the examples we've covered:

Updating an Employee's Salary: A stored procedure to update the salary of an employee.
Deleting an Employee: A stored procedure to delete an employee based on id.
Retrieving Employee Details: A stored procedure that fetches employee details by id.
Multiple Operations: A stored procedure that inserts a new employee and logs the action in an audit_log.
Benefits of Using Stored Procedures:

Reusability: Once created, stored procedures can be called multiple times.
Encapsulation: You can package multiple SQL queries into a single unit.
Maintainability: Changes to the logic can be done in one place, rather than updating code all over your application.
Security: You can limit direct access to tables and allow only specific users to call certain procedures.
